{"name":"Brief Portfolio","tagline":"Jesse Meade-Clift","body":"#Hello ICOM Productions!\r\n\r\nI put together this quick demo page of two of my recent projects. Again the code is unfortunately private since these are under contract, but I would be happy to give you a live demo in person and discuss more!\r\n\r\nAs an aside, my GitHub does have a few public repositories. [rubylife](https://github.com/jessewmc/rubylife), though fairly old now, is the best documented. This was my first Ruby project--a simple implementation of Conway's Game of Life.\r\n\r\n##Box-All Storage Management\r\n\r\nBox-All Storage in Edmonton is a portable storage bin company. They needed a new system to manage their box inventory, customers, deliveries and invoicing. It had to work in the office (and be print-friendly) as well as on mobile for deliveries. I had some prior exposure to Ruby, and decided to use Rails for this project. Initially I hosted on Heroku for ease of use, but cost and flexibility led me to use Amazon's Elastic Beanstalk for production in the end. Amazon RDS gave me relatively robust Postgres hosting with backups (I also pull separate backups for Box-All regularly) as well.\r\n\r\nI went back and forth regularly with the Box-All manager to get his feedback on the software until we arrived at something that we were both happy with. I enjoy working directly with someone who uses my work to make life easier, it's very satisfying.\r\n\r\nSo, here we go. This is the login screen (complete with password reset emails and remembered sessions):\r\n\r\n![boxall login](/boxall/login.png)\r\n\r\nAs you can see I am using Bootstrap for layout. A simple, clean interface was the main requirement here.\r\n\r\nAfter logging in:\r\n\r\n![boxall home](/boxall/home.png)\r\n\r\nOn this page we can see how many boxes are in use at a glance, todays deliveries which can be printed for the driver (or any other date by clicking the date), and currently active contracts. These screenshots are all local with fake customer data of course.\r\n\r\nHere is a customer view page, where we can see their info a glance, as well as create new contracts or edit customer data:\r\n\r\n![boxall customer](/boxall/customer.png)\r\n\r\nClicking new contract:\r\n\r\n![boxall new contract](/boxall/newcontract.png)\r\n\r\nWe can select the start date with jQuery Datepicker, and other options.\r\n\r\nAt the bottom of the page we can select from any containers not currently in use:\r\n\r\n![boxall contract boxes](/boxall/contractboxes.png)\r\n\r\nHere is a newly created contract overview:\r\n\r\n![boxall contract](/boxall/contract.png)\r\n\r\nDeliveries are scheduled on contracts. They show up on the home page as above, and also on the deliveries screen:\r\n\r\n![boxall deliveries](/boxall/deliveries.png)\r\n\r\nEach delivery shows the customer last name and number of boxes being delivered. Zero boxes on a delivery is allowed because Box-All often schedules deliveries before they know what boxes will be delivered. Deliveries can be clicked on for more details (such as destination and notes).\r\n\r\nHere we can see an overview of who has what. Box-All management specifically requested this feature.\r\n\r\n![boxall rationalization](/boxall/rationalization.png)\r\n\r\nInvoices are also generated on contracts:\r\n\r\n![boxall invoice](/boxall/invoice.png)\r\n\r\nThe Invoices index page:\r\n\r\n![boxall invoices](/boxall/invoices.png)\r\n\r\nKey features here include:\r\n* unpaid invoices are marked in red\r\n* search invoices by month (clicking on 'Search Invoice Month' drops down a jQuery month selector)\r\n* totals button shows monthly gross invoice totals\r\n\r\nSome other features not highlighted so far: Search for customers (name or phone), boxes, contracts. Print friendly views of contracts, invoices and daily deliveries where paper is still necessary. All views are mobile friendly.\r\n\r\nAll in all a fairly straightforward application, but I'm happy to say that I built it entirely myself and it is currently used in production at Box-All.\r\n\r\n\r\n\r\n\r\n##LuaCAM CNC macros and program database\r\n\r\nI worked as a Machinist at Ensign Energy for a few years. They had some computer controlled machines (a mill and a lathe) but no sophisticated [CAM](https://en.wikipedia.org/wiki/Computer-aided_manufacturing) software (like [MasterCAM](https://www.mastercam.com/en-us/)). The machines had some built in programming capacity, but it was limited for complex or unusual parts.\r\n\r\n[CNC](http://en.wikipedia.org/wiki/Numerical_control) machines operate on [G-code](http://en.wikipedia.org/wiki/G-code). It looks like this:\r\n```\r\nG95 G91\r\nG00 X0.0000 Y0.0000 Z12.0000\r\nG01 Z10.0000 F0.0040\r\nG01 X10.0000\r\nG01 Z10.1000\r\nG00 X0.0000\r\nG01 Z9.0000 F0.0040\r\nG01 X10.0000\r\nG01 Z9.1000\r\nG00 X0.0000\r\nG01 Z8.0000 F0.0040\r\nG01 X10.0000\r\nG01 Z8.1000\r\nG00 X0.0000\r\nG00 X0.0000 Y0.0000 Z12.0000\r\nM99\r\n```\r\n\r\nEssentially this sets a coordinate system, and line by line tells the machine to move from point to point and in what manner (rapid, slow feed, etc). Of course it is not really a programming language, and it is not Turing complete. It is more like low level positional instruction. There are some macro programming systems built into machines, but they are terrible--for example, the industry standard Fanuc macro system does not have named variables or functions--but it has GOTO.\r\n\r\nModern CAM software is usually hooked up with 3D CAD models, and a graphical interface to generate toolpaths and spit out G-code. I figured if I couldn't do that, at least I could write an expressive macro system with named variables, functions, looping, control structures, and access to mathematical libraries.\r\n\r\nHere is the result:\r\n```  \r\nG95 G91\r\nG00 X0 Y0 Z12\r\n\r\ncurrent_depth = 10\r\nfeed = 0.004\r\n\r\nfor i = current_depth, 8, -1 do\r\n  clearance = i + 0.1\r\n  G01 Z$i F$feed\r\n  G01 X10\r\n  G01 Z$clearance\r\n  G00 X0\r\nend\r\n\r\nG00 X0 Y0 Z12\r\nM99\r\n```\r\n\r\nThis compiles to the previous G-code program. It is essentially [lua](http://www.lua.org/), in which the system is written, with inline G-code. Of course the examples are similar in length, but I frequently had fifty line macros that output thousands of lines of G-code. The macro system is also far more expressive.\r\n\r\nEventually I got to the point where it was worthwhile to write a GUI so the other Machinists could use my programs:\r\n\r\n![luacamcycle](/luacam/luacamcycle.png)\r\n\r\nWe select a program number for the output file (required for the machines), then under 'Macro' we select the program to use. Under 'Variables' various dimensions associated with the macro can be changed without changing the saved macro itself--just the current output to be saved on the machine. In the 'Raw Macro' window we see the macro itself (cannot be edited from here), and finally of course the G-Code output that will be saved and transferred to the machine.\r\n\r\nOne of the other functions I added to the system was a program database for the machines. The machines themselves did not have any program name, search, or meta-data capacity, so this came in handy for finding and tracking programs:\r\n\r\n![luacam search](/luacam/searchscreen.png)\r\n\r\nSearch updates live as the user types:\r\n\r\n![luacam search progress](/luacam/searchprogress.png)\r\n\r\nClicking on a program displays more information, and notes a user may have made:\r\n\r\n![luacam program display](/luacam/progdisplay.png)\r\n\r\nThe whole system runs on Debian Linux (originally Windows as well, but I did not maintain compatibility when I switched). The graphics library is [IUP](http://webserver2.tecgraf.puc-rio.br/iup/), which sits on top of GTK as I used it. The database was a simple SQLite system. Mostly for my own education I did not use an ORM, but instead simple lua bindings via lsqlite, and lua's substantial text handling capabilities to construct queries dynamically.\r\n\r\nThanks for reading!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}